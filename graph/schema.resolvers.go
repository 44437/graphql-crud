package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"
	"graphql-crud/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Message, error) {
	var availableUser *model.User

	for _, user := range r.UserList {
		if user.ID == input.UserID {
			availableUser = user
			break
		}
	}

	if availableUser.ID == "" {
		return &model.Message{
			TodoID: "",
			Text:   "User ID is not available",
		}, nil
	}

	var newTodoId = fmt.Sprintf("%v", len(r.TodoList)+1)

	var newTodo = &model.Todo{
		ID:   newTodoId,
		Text: input.Text,
		Done: false,
		User: availableUser,
	}

	r.TodoList = append(r.TodoList, newTodo)

	return &model.Message{
		TodoID: newTodoId,
		Text:   "Success",
	}, nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, todoID string, userID string) (*model.Message, error) {
	var availableUser *model.User

	for _, user := range r.UserList {
		if user.ID == userID {
			availableUser = user
			break
		}
	}

	if availableUser.ID == "" {
		return &model.Message{
			TodoID: "",
			Text:   "User ID is not available",
		}, nil
	}

	for _, todo := range r.TodoList {
		if todo.ID == todoID {
			todo.Done = true
			return &model.Message{
				TodoID: todoID,
				Text:   "Success",
			}, nil
		}
	}

	return &model.Message{
		TodoID: todoID,
		Text:   "Todo ID is not available",
	}, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, todoID string, userID string) (*model.Message, error) {
	for index, todo := range r.TodoList {
		if todo.ID == todoID && todo.User.ID == userID {
			r.TodoList = append(r.TodoList[:index], r.TodoList[index+1:]...)
			return &model.Message{
				TodoID: todoID,
				Text:   "Success",
			}, nil
		}
	}

	return &model.Message{
		TodoID: todoID,
		Text:   "Could not be deleted",
	}, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.TodoList, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
